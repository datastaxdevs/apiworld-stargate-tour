{
  "$schema": "https://aka.ms/codetour-schema",
  "title": "2. REST API",
  "nextTour": "3. Document API",
  "steps": [
    {
      "title": "REST API",
      "description": "## REST API\n\nThe REST API accesses resources by endpoint, with additional instructions through POST body where needed\n\nThis feels very similar to CQL access, but can be accessed via any HTTP client code\n\nFront end developers are most familiar with this type of interface.\n"
    },
    {
      "title": "REST API - Create table",
      "description": "## REST API - Create Table\n\nWe'll work through the process of creating a table, adding some rows, editing and deleting them and then deleting the table, to see what the calls look like using HTTP.\n\nThe table will be called \"cavemen\" and it will have three fields:\n* Firstname\n* Lastname\n* Occupation\n\nThe partitioning (primary) key will be lastname and the clustering (ordering) key will be firstname.\n\nThe whole call looks like this:\n\n``` bash\nhttp POST :/rest/v2/schemas/keyspaces/stargate/tables json:='{\n  \"name\": \"cavemen\",\n  \"ifNotExists\": false,\n  \"columnDefinitions\": [\n    {\n      \"name\": \"firstname\",\n      \"typeDefinition\": \"text\",\n      \"static\": false\n    },\n    {\n      \"name\": \"lastname\",\n      \"typeDefinition\": \"text\",\n      \"static\": false\n    },\n        {\n          \"name\": \"occupation\",\n          \"typeDefinition\": \"text\"\n        }\n  ],\n  \"primaryKey\": {\n    \"partitionKey\": [\n      \"lastname\"\n    ],\n    \"clusteringKey\": [\n      \"firstname\"\n    ]\n  }\n}'\n```\n\n>> http POST :/rest/v2/schemas/keyspaces/stargate/tables json:='{\"name\": \"cavemen\", \"columnDefinitions\": [{\"name\": \"firstname\"},{ \"name\": \"lastname\"},{\"name\": \"occupation\"}], \"primaryKey\": { \"partitionKey\": [ \"lastname\" ], \"clusteringKey\": [\"firstname\"]}'\n\nTo make sure it was created, let's check the list of tables we have:\n\n>> http :/rest/v2/schemas/keyspaces/stargate/tables\n\n"
    },
    {
      "title": "REST API - Add Some Rows",
      "description": "## REST API - Add Some Rows\n\nWe've got a table but it's empty - let's put some cavemen in our cavemen table.\n\n>> http POST :/rest/v2/keyspaces/stargate/cavemen json:='{\"firstname\" : \"Fred\", \"lastname\": \"Flintstone\"}'\n\n>> http POST :/rest/v2/keyspaces/stargate/cavemen json:='{\"firstname\" : \"Barney\", \"lastname\": \"Rubble\"}'\n\nTo make sure they made it in, we can do a simple search on the database:\n\n>> http :/rest/v2/keyspaces/stargate/cavemen where=='{\"lastname\":{\"$in\":[\"Rubble\",\"Flintstone\"]}}'"
    },
    {
      "title": "REST API - Update Rows",
      "description": "## REST API - Update Rows\n\nFred is driving Wilma crazy, so she needs him to get a job.  Give him one by updating the row.\n\n>> http PUT :/rest/v2/keyspaces/stargate/cavemen/Flintstone/Fred json:='{ \"occupation\": \"Quarry Screamer\"}'\n\nCheck our work: \n\n>> http :/rest/v2/keyspaces/stargate/cavemen where=='{\"lastname\":{\"$in\":[\"Rubble\",\"Flintstone\"]}}' "
    },
    {
      "title": "REST API - Delete Rows",
      "description": "## REST API - Delete Rows\n\nNow Fred has a job but Barney's kind of useless.  Let's delete him from the database.  Notice that here we're addressing Barney by the partition key (lastname) and the clustering key (firstname).\n\n>> http DELETE :/rest/v2/keyspaces/stargate/cavemen/Rubble/Barney\n\nSo wait, is he gone?\n\n>> http :/rest/v2/keyspaces/workshop/stargate/Rubble/Barney"
    },
    {
      "title": "REST API - Delete Table",
      "description": "## REST API - Delete Table\n\nLet's clear out this table so we can use it again for the other APIs.\n\n>> http DELETE :/rest/v2/schemas/keyspaces/stargate/tables/cavemen\n\nDouble checking - what tables are in my keyspace?\n\n>> http :/rest/v2/schemas/keyspaces/stargate/tables"
    },
    {
      "title": "Back to the slides",
      "description": "Time to get back to the slides to move on to the Document API."
    }
  ],
  "ref": "main"
}