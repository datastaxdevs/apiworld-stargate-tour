{
    "$schema": "https://aka.ms/codetour-schema",
    "title": "3. Document API",
    "steps": [
      {
        "title": "Document API",
        "description": "## Document API\n\n* Similar to MongoDB\n* No schema required\n* Upload structured JSON objects to collections\n* Access data based on values within the objects\n"
      },
      {
        "title": "Document API - Create table",
        "file": ".env",
        "description": "## Document API - Create Table\n\nWe'll work through the process of creating a table, adding some rows, editing and deleting them and then deleting the table, to see what the calls look like using HTTP.\n\nCheck to see what keyspaces we have available:\n\n>> http :/rest/v2/schemas/namespaces | jq \".data[].name\"\n\nHey, look! There's our friend 'stargate'. A namespace is just a different way to organize data, and your keyspace is right there. In fact, your keyspace should be in your environment variables, but just to check, look in the open file to see what ASTRA_DB_KEYSPACE is set to.\n\nIf that says \"stargate\" you're good to go, you'll get that for free as the KS placeholder in the queries.  If not, go ahead and change it to 'stargate.'"
      },
      {
        "title": "Document API - Add Some Rows",
        "description": "## Document API - Add Some Rows\n\nOK, let's get some cavemen in there! The collection name will be auto-created when you add the document, so it doesn't have to exist ahead of time. We'll use the KS shortcut to grab the keyspace from our credentials resource file.\n\n>> http POST :/rest/v2/namespaces/KS/collections/cavemen json:='{\"firstname\": \"Fred\", \"lastname\": \"Flintstone\"}'\n\nHmm, that document ID isn't easy to use, let's go ahead and specify one explicitly for Barney.\n\n>> http PUT :/rest/v2/namespaces/KS/collections/cavemen/BarneyRubble json:='{\"firstname\": \"Barney\", \"lastname\": \"Rubble\"}'\n\nLet's make sure our documents were written correctly:\n\n>> http :/rest/v2/namespaces/KS/collections/cavemen page-size==5\n\nIF you know the ID of your document, it's easy to see what's there:\n\n>> http :/rest/v2/namespaces/KS/collections/cavemen/BarneyRubble\n\nBut where is Fred? I didn't write down his document ID! You can get the Document ID for anything by querying the values in the document.\n\n>> http GET :/rest/v2/namespaces/KS/collections/cavemen where=='{\"firstname\": { \"$eq\": \"Fred\"}}'\n\nThe \"where\" clause is really powerful, and allows you to combine different elements to really zero in on the document you want.\n\nYou can even get just a subset of the document by specifying a particular section in the path.  Let's just get Barney's first name.\n\n>> http :/rest/v2/namespaces/KS/collections/cavemen/BarneyRubble/firstname\n\nand you can use \"where\" to specify a range of documents:\n\n>> http GET :/rest/v2/namespaces/KS/collections/cavemen/BarneyRubble where:='{\"lastname\": {\"$gt\": \"Flintstone\"}}'"
      },
      {
        "title": "Document API - Update Rows",
        "description": "## Document API - Update Rows\n\nSo now we have Fred and Barney, but once again we haven't given Fred a job. He just annoys Wilma when he hangs out at home, so that won't do at all.\n\nHere's how you give Fred a job and get him out of Wilma's hair. Remember, we just got his ID a few commands ago. Let's grab it again and set it in the environment so we can use it as we like.\n\nFirst, get your documentId.\n\n>> export DOCUMENT_ID=`http :/rest/v2/namespaces/KS/collections/cavemen where=='{\"firstname\": { \"$eq\": \"Fred\"}}'`\n\nAgain, giving Fred a job. Wilma thanks you.\n\n>> http PATCH :/rest/v2/namespaces/KS/collections/cavemen/$DOCUMENT_ID json:='{\"firstname\":\"Fred\",\"lastname\":\"flintstone\",\"occupation\":\"Quarry Screamer\"}'\n\nSo, how's Fred looking now?\n\n>> http GET :/rest/v2/namespaces/KS/collections/cavemen/$DOCUMENT_ID"
      },
      {
        "title": "Document API - Delete Rows",
        "description": "## Document API - Delete Table\n\nNow Fred has a job but Barney's kind of useless.  Let's delete him from the database.  Notice that here we're addressing Barney by the partition key (lastname) and the clustering key (firstname).\n\nhttp DELETE :/rest/v2/namespaces/KS/collections/cavemen/BarneyRubble\n\nBut what if you're done with all the cavemen and want to clear out your documents? This one is also really easy:\n\nhttp DELETE :/rest/v2/namespaces/KS/collections/cavemen"
      },
      {
        "title": "Back to the slides",
        "description": "Time to get back to the slides to move on to the GraphQL API."
      }
    ],
    "ref": "main"
  }